@page "/"
@using Piet.Grid
@using Piet.Color
@using Piet.Command
@using Piet.Interpreter
@using Piet.Interpreter.Events

@inject IOutputEventService OutputEventService
@inject ILoggerFactory LoggerFactory

<PageTitle>Piet</PageTitle>

<h3>Piet</h3>

<p>
    <label>
        Height
        <input type="number" @bind="_gridHeight"/>
    </label>
</p>

<p>
    <label>
        Width 
        <input type="number" @bind="_gridWidth"/>
    </label>
</p>

<p>
    <label>
        Output (intger)
        <input type="number" @bind="_outputInteger"/>
    </label>
</p>

<p>
    <label>
        Output (character) 
        <input type="text" @bind="_outputCharacter"/>
    </label>
</p>

<p>
    <button class="btn btn-primary" @onclick="ResizeGrid">Resize Grid</button>

    <button class="btn btn-primary" @onclick="Reset">Reset</button>

    <button class="btn btn-primary" @onclick="Run">Run</button>
    
    <button class="btn btn-primary" @onclick="FillGridRandom">Fill random</button>
</p>

<p>
    <table>
        <tbody>
            @for (var satuationIndex = 0; satuationIndex < ColorCommandControl.SatuationLevels; satuationIndex++)
            {
                <tr>
                    @for (var hueIndex = 0; hueIndex < ColorCommandControl.HueLevels; hueIndex++)
                    {
                        int i_local = satuationIndex;
                        int j_local = hueIndex;
                        var colorCommand = _colorCommands[satuationIndex, hueIndex];
                        var commandName = @colorCommand.Command;

                        <td style='height: 30px; max-height: 30px; width: 130px; max-width:130px; border: 1px solid black; background-color: rgb(@colorCommand.Color.R, @colorCommand.Color.G, @colorCommand.Color.B)' @onclick="@(e => UpdateColorCommand(i_local, j_local))">@GetCellName(colorCommand)</td>}</tr>
            }

        </tbody>
    </table>
</p>

<p>
    <table>
        <tbody>
        <tr>
            <td style='height: 30px; max-height: 30px; width: 50px; max-width: 50px; border: 1px solid black; background-color: rgb(@_colorBlack.R, @_colorBlack.G, @_colorBlack.B)' @onclick="@(e => SetCurrentColor(_colorBlack))"></td>
        </tr>
        <tr>
            <td style='height: 30px; max-height: 30px; width: 50px; max-width: 50px; border: 1px solid black; background-color: rgb(@_colorWhite.R, @_colorWhite.G, @_colorWhite.B)' @onclick="@(e => SetCurrentColor(_colorWhite))"></td>
        </tr>
        </tbody>
    </table>
</p>

<table>
    <tbody>
    @*@foreach (var row in GridData)*@
    @for (var i = 0; i < _codelGrid.Height; i++)
    {
        <tr>
            @*@foreach (var value in row)*@
            @for (var j = 0; j < _codelGrid.Width; j++)
            {
                int i_local = i;
                int j_local = j;
                var value = _codelGrid.GetCodel(j, i).Color;

                <td style='height: 30px; max-height: 30px; width: 30px; max-width:30px; border: 1px solid black; background-color: rgb(@value.R, @value.G, @value.B)' @onclick="@(e => UpdateColor(j_local, i_local))"></td>
            }
        </tr>
    }
    </tbody>
</table>


@code {
    @*inspiration for basic html content: https://gabriellesc.github.io/piet/index.html*@

    public const int InitialGridHeight = 15;
    public const int InitialGridWidth = 25;

    private static int _gridHeight = InitialGridHeight; 
    private static int _gridWidth = InitialGridWidth;
    private static PietColor _currentColor = PietColors.LightRed;
    private static PietColor _colorBlack = PietColors.Black;
    private static PietColor _colorWhite = PietColors.White;


    private int? _outputInteger;
    private char? _outputCharacter;


    private static CodelGrid _codelGrid = 
        new CodelGridBuilder()
            .WithHeight(_gridHeight)
            .WithWidth(_gridWidth)
            .WithInitialColor(PietColors.White)
            .Build();

    private static ColorCommand[,] _colorCommands = 
        ColorCommandControl.GetColorCommands(_currentColor);

    private void UpdateColor(int xPosition, int yPosition)
    {
        System.Console.WriteLine($"xPosition: {xPosition} yPosition: {yPosition}");
        _codelGrid.SetCodelColor(xPosition, yPosition, _currentColor);
    }

    private void UpdateColorCommand(int satuationIndex, int hueIndex)
    {
        System.Console.WriteLine($"satuationIndex: {satuationIndex} hueIndex: {hueIndex}");
        _currentColor = _colorCommands[satuationIndex, hueIndex].Color;
        _colorCommands = ColorCommandControl.GetColorCommands(_currentColor);
        
    }

    private void SetCurrentColor(PietColor color)
    {
        _currentColor = color;
    }

    private void Reset()
    {
        _gridHeight = InitialGridHeight;
        _gridWidth = InitialGridWidth;
        _currentColor = PietColors.LightRed;

        _codelGrid = new CodelGridBuilder()
            .WithHeight(_gridHeight)
            .WithWidth(_gridWidth)
            .WithInitialColor(PietColors.White)
            .Build();

        _colorCommands = ColorCommandControl.GetColorCommands(_currentColor);
    }

    private void ResizeGrid()
    {
        _codelGrid = new CodelGridBuilder()
            .WithHeight(_gridHeight)
            .WithWidth(_gridWidth)
            .WithInitialColor(PietColors.White)
            .Build();

    }

    private void FillGridRandom()
    {
        _codelGrid.FillWithRandomValues();
    }

    private void Run()
    {
        RegisterEventListener();

        var interpreter = new PietInterpreter(
            LoggerFactory.CreateLogger<PietInterpreter>(),
            _codelGrid,
            new CodelChooser(_codelGrid),
            new CodelBlockSearcher(_codelGrid),
            OutputEventService
            );

        interpreter.TEST_TriggerOutputOperation(42);
        interpreter.TEST_TriggerOutputOperation('c');
        

        Console.WriteLine("Run");
    }

    private void RegisterEventListener()
    {
        OutputEventService.OutputInteger += OutputEventServiceOnOutputInteger;
        OutputEventService.OutputCharacter += OutputEventServiceOnOutputCharacter;
    }

    private void OutputEventServiceOnOutputCharacter(object? sender, OutputCharacterOperationEventArgs e)
    {
        Console.WriteLine(e.Value);
        _outputCharacter = e.Value;
    }

    private void OutputEventServiceOnOutputInteger(object? sender, OutputIntegerOperationEventArgs e)
    {
        Console.WriteLine(e.Value);
        _outputInteger = e.Value;
    }


    private string GetCellName(ColorCommand colorCommand)
    {
        if (_currentColor != _colorWhite && _currentColor != _colorBlack && colorCommand.Command != Command.None)
        {
            return colorCommand.Command.ToString();
        }
        return "";
    }
}

